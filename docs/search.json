[
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "teaching",
    "section": "",
    "text": "Statistical Computing\nData Analysis and Statistical Inference\nIntro to Data Science"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "notes",
    "section": "",
    "text": "March 7th, 2023\n\nregexp notes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "I’m an assistant professor of the practice in the Department of Statistical Science at Duke University."
  },
  {
    "objectID": "slides/regexp.html#definition-and-utility",
    "href": "slides/regexp.html#definition-and-utility",
    "title": "Regular expressions",
    "section": "Definition and utility",
    "text": "Definition and utility\nA regular expression (aka regex or regexp) is a custom defined string matching pattern. A regular expression lets you:\n\nextract only the phone number from this string: “My phone number is (123) 456-7890, not to be confused with my birth month which is 0”\nsearch and replace multiple spellings of the word gray (grey, 6R3Y) in a document simultaneously\nsearch through all files in a directory for the one that contains a specific string\nfind the specific line number from a file that contains a string\nfind and replace through multiple files simultaneously\n\nAnd much, much more!"
  },
  {
    "objectID": "slides/regexp.html#quick-example",
    "href": "slides/regexp.html#quick-example",
    "title": "Regular expressions",
    "section": "Quick example",
    "text": "Quick example\ngrep and grepl are base R functions that return the index of a match and the logical value of a match respectively.\n\ntext = c(\"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\",\n         \"everything this world has to offer.\")\ntext\n\n[1] \"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\"\n[2] \"everything this world has to offer.\"                               \n\n\n\ngrep(\"Pirate\", text)\n\n[1] 1\n\ngrepl(\"Pirate\", text)\n\n[1]  TRUE FALSE\n\n\n\nregular expressions are case-sensitive\n\ngrep(\"pirate\", text)\n\ninteger(0)\n\ngrepl(\"pirate\", text)\n\n[1] FALSE FALSE"
  },
  {
    "objectID": "slides/regexp.html#introducing-stringr",
    "href": "slides/regexp.html#introducing-stringr",
    "title": "Regular expressions",
    "section": "introducing stringr",
    "text": "introducing stringr\n\n\n\nstringr hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix str.\nThe best summary of stringr functions is on this cheatsheet\nNotice below that the string comes first in these functions (in contrast with grep)\nExample\n\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n\n\nstr_detect()str_extract()str_replace\n\n\n\nlike grepl\n\n\nstr_detect(txt, \":\")\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\nreturn the match\n\n\nstr_extract(txt, \"\\\\s([A-Z]|[a-z])*ng\") # first instance\n\n[1] \" going\" NA       \" Going\"\n\nstr_extract_all(txt, \"\\\\s([A-Z]|[a-z])*ng\") %>% str()\n\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n\n\n\n\n\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\""
  },
  {
    "objectID": "slides/regexp.html#the-power-of-str_replace",
    "href": "slides/regexp.html#the-power-of-str_replace",
    "title": "Regular expressions",
    "section": "The power of str_replace",
    "text": "The power of str_replace\n\nno_bots = \"My number is one Two tHree 456 fOuR 3 2 1\"\n\n\nstr_to_lower(no_bots) %>%\n  str_replace_all(c(\"one\" = \"1\", \"two\" = \"2\", \n                    \"three\" = \"3\", \"four\" = \"4\")) %>%\n  str_extract_all(\"\\\\d\") %>% # simplify arg here could change pipeline\n  unlist() %>%\n  paste(collapse = \"\") # or use str_c(collapse = \"\")\n\n[1] \"1234564321\""
  },
  {
    "objectID": "slides/regexp.html#basic-principles",
    "href": "slides/regexp.html#basic-principles",
    "title": "Regular expressions",
    "section": "Basic principles",
    "text": "Basic principles\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g. [0123456789] matches any digit.\nTo group characters together into an expression, use parentheses, ()\n\n\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression.\n+ match one or more occurrences of the preceding expression.\n{} match the preceding expression for as many times as the value inside this bracket.\n\n\n\nSome repeater examples:\n\n\n\n\n\n\n\n\n\nregexp\nexplanation\n\n\n\n\na*\nmatch 0 or more occurences of “a”\n\n\na+\nmatch 1 more occurences of “a”\n\n\n(abc)+\nmatch 1 or more back-to-back occurence of the group “abc”\n\n\na{3}\nmatch a 3 times\n\n\na{3,}\nmatch a 3 or more times\n\n\na{3,5}\nmatch “a” 3, 4 or 5 times\n\n\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/regexp.html#symbols",
    "href": "slides/regexp.html#symbols",
    "title": "Regular expressions",
    "section": "Symbols",
    "text": "Symbols\n\n. symbol for wildcard. The dot symbol can take place of any other symbol.\n? symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: docx? will match both docx and doc\n$ symbol for position match end. Tells the computer that the match must occur at the end of the string or before \\n at the end of the line or string.\n\\ symbol for escaping characters. If you want to match for the actual + or ., etc. add a backslash \\ before that character.\n| symbol for “or”. Match any one element separated by the vertical bar | character. Example: th(e|is|at) will match words “the”, “this” and “that”.\n^ symbol has two meanings.\n\nBy itself, ^ sets the position of the match to the beginning of the string or line. Example: ^\\d{3} says to match the first three digits at the beginning of the string and will return 919 from 919-123-4567.\nTogether with brackets, [^set_of_characters] implies exclusion. Example: [^abc] will match any character except a, b, c."
  },
  {
    "objectID": "slides/regexp.html#character-classes",
    "href": "slides/regexp.html#character-classes",
    "title": "Regular expressions",
    "section": "Character classes",
    "text": "Character classes\nCharacter classes: match a character by its class, for example: letter, digit, space, and symbols.\n\n\\s : matches any whitespace characters such as space and tab\n\\S : matches any non-whitespace characters\n\\d : matches any digit character\n\\D : matches any non-digit characters\n\\w : matches any word character (basically alpha-numeric)\n\\W : matches any non-word character\n\\b : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/regexp.html#a-hierarchical-view-of-character-classes",
    "href": "slides/regexp.html#a-hierarchical-view-of-character-classes",
    "title": "Regular expressions",
    "section": "A hierarchical view of character classes",
    "text": "A hierarchical view of character classes\n\n{citation: http://perso.ens-lyon.fr/lise.vaudor/strings-et-expressions-regulieres/}"
  },
  {
    "objectID": "slides/regexp.html#ranges",
    "href": "slides/regexp.html#ranges",
    "title": "Regular expressions",
    "section": "Ranges",
    "text": "Ranges\n- can be used to interpolate between first and last and grab consecutive values. Example: [A-Z] matches any capital letters from “A” to “Z”. [1-4] matches any integer digit from 1 to 4.\nTo match an alphabetical character (upper or lower case “A-Z” or “a-z”) but not numbers, you can use the regular expression ([A-Z]|[a-z])\nTo match everything but capital “F” through “N”, you can use the regular expression [^F-N]"
  },
  {
    "objectID": "slides/regexp.html#escapism",
    "href": "slides/regexp.html#escapism",
    "title": "Regular expressions",
    "section": "Escapism",
    "text": "Escapism\nWhen to escape?\n. ^ $ * + ? { } [ ] \\ | ( )\nAre all special and perform as described on the previous slides by default. Therefore, these special characters must be escaped to match directly. You need to use two levels of escape to escape a special character. Example:\n\ntxt = \"To be, [or] not to be that is the question.\"\n\n\nstr_detect(txt, \"[\")\n\nError in stri_detect_regex(string, pattern, negate = negate, opts_regex = opts(pattern)): Missing closing bracket on a bracket expression. (U_REGEX_MISSING_CLOSE_BRACKET, context=`[`)\n\n\n\nstr_detect(txt, \"\\[\")\n\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n\n\n\nstr_detect(txt, \"\\\\[\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/regexp.html#escape-classes",
    "href": "slides/regexp.html#escape-classes",
    "title": "Regular expressions",
    "section": "Escape classes",
    "text": "Escape classes\nIn order to access the presumed functionality of character classes, you need to use a double escape as well. Example:\n\ntxt = c(\"A1\", \"B2\", \"CC\", \"DD\", \"EE2\")\n\n\nWhich strings end with a digit?\n\n\nstr_detect(txt, \"\\d$\")\n\nError: '\\d' is an unrecognized escape in character string starting \"\"\\d\"\n\n\n\nstr_detect(txt, \"\\\\d$\")\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\nWhich strings contain 3 alphanumeric characters?\n\n\nstr_detect(txt, \"\\\\w{3}\")\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\n\n\n\n\ntl;dr\n\n\nto match a symbol or character class, use double escapes"
  },
  {
    "objectID": "slides/regexp.html#exercise-1",
    "href": "slides/regexp.html#exercise-1",
    "title": "Regular expressions",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\n\nDownload the files secret-message.txt and emails.txt using the command below in the console:\n\n\n\n\n\n\nWARNING\n\n\nDO NOT VIEW THE FILE – YOUR CONTAINER MAY CRASH!\n\n\n\n\ndownload.file(\"https://athos00.github.io/data/secret-message.txt\", \n              destfile = \"secret-message.txt\")\n\ndownload.file(\"https://athos00.github.io/data/emails.txt\", \n              destfile = \"emails.txt\")\n\nHint: read in the file as a string with read_lines()\npart 1\nIn secret-message.txt, find the secret message. It will be of the form DataFest{secret-message} where secret-message is replaced by some other text.\npart 2\nIn emails.txt extract the unique part of the email address (part before the “@”) and count the number of each hosting domain, i.e. count how many emails are Duke emails and how many are gmail."
  },
  {
    "objectID": "slides/regexp.html#examples",
    "href": "slides/regexp.html#examples",
    "title": "Regular expressions",
    "section": "Examples",
    "text": "Examples\nIn the following example we will search through the text and extract matches.\n\npirate_phone = \"Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\"\n\nregex extraction\n\nregexoutputprinciples\n\n\n\nstr_extract(pirate_phone, \"123 456 7890\")\n\n\n\n123 456 7890\n\n\nexact match\n\n\n\n\nregexoutputprinciples\n\n\n\nstr_extract(pirate_phone, \"[0-9]{3}\\\\-[0-9]{3}\\\\-[0-9]{4}\")\n\n\n\n012-345-6789\n\n\nmatching xxx-xxx-xxxx using ranges, repeaters, escaped characters"
  },
  {
    "objectID": "slides/regexp.html#examples-1",
    "href": "slides/regexp.html#examples-1",
    "title": "Regular expressions",
    "section": "Examples",
    "text": "Examples\n\npirate_phone = \"Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\"\n\nregex extraction\n\nregexoutputprinciples\n\n\n\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\)\\\\d{3}\\\\s\\\\d{4}\")\n\n\n\n(919)000 0000\n\n\nmatching (xxx)xxx xxxx using character classes (\\d for digit, \\s for whitespace) and repeaters\n\n\n\n\nregexoutputprinciples\n\n\n\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\).?\\\\d{3}\\\\s[0-9]{4}\")\n\n\n\n(919)000 0000\n(919) 123 4567\n\n\nmatching (xxx)*xxx xxxx using character classes, wildcard (.) and optional chracter (?)\n\n\n\n\n\nregexoutputprinciples\n\n\n\n# hidden exercise, code here!\n\n\n\n123 456 7890\n012-345-6789\n(919)000 0000\n(919) 123 4567\n0000000000\n\n\nMultiple optional matching"
  },
  {
    "objectID": "slides/regexp.html#greedy-vs-ungreedy-matching",
    "href": "slides/regexp.html#greedy-vs-ungreedy-matching",
    "title": "Regular expressions",
    "section": "Greedy vs ungreedy matching",
    "text": "Greedy vs ungreedy matching\nWhat went wrong here?\n\ntext = \"<div class='main'> <div> <a href='here.pdf'>Here!</a> </div> </div>\"\n\n\nstr_extract(text, \"<div>.*</div>\")\n\n[1] \"<div> <a href='here.pdf'>Here!</a> </div> </div>\"\n\n\n\nIf you add ? after a repeater, the matching will be non-greedy (find the shortest possible match, not the longest).\n\nstr_extract(text, \"<div>.*?</div>\")\n\n[1] \"<div> <a href='here.pdf'>Here!</a> </div>\"\n\n\n\n\n🔗 athos00.github.io"
  },
  {
    "objectID": "slides/regexp.html#exercise",
    "href": "slides/regexp.html#exercise",
    "title": "Regular expressions",
    "section": "Exercise",
    "text": "Exercise\n\n\n\nDownload the files secret-message.txt and emails.txt using the command below in the console:\n\n\n\n\n\n\nWARNING\n\n\nDO NOT VIEW THE FILE – YOUR CONTAINER MAY CRASH!\n\n\n\n\ndownload.file(\"https://athos00.github.io/data/secret-message.txt\", \n              destfile = \"secret-message.txt\")\n\ndownload.file(\"https://athos00.github.io/data/emails.txt\", \n              destfile = \"emails.txt\")\n\nHint: read in the file as a string with read_lines()\npart 1\nIn secret-message.txt, find the secret message. It will be of the form DataFest{secret-message} where secret-message is replaced by some other text.\npart 2\nIn emails.txt extract the unique part of the email address (part before the “@”) and count the number of each hosting domain, i.e. count how many emails are Duke emails and how many are gmail."
  }
]